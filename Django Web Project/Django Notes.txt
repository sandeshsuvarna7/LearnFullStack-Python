to install django:

pip install django

Check version of django:
django-admin --version

Start  a project:

django-admin startproject "FirstHello"


Run server:

py manage.py runserver

Default port is 8000

run a server at port:

py manage.py runserver 8100


To create an an app in project:

py manage.py startapp "MyFirstApp"


Time, language code, database is set in settings.py


pip install django-debug-toolbar >>>> to install debugging logs in 

Debug, info are log entry message
For foreign key, delete can be Protect, cascade and delete


To create super user in Django site:
py manage.py createsuperuser

For each session or project, you need separate super user


If you’re interested, you can also run this checks for any problems in your project without making migrations or touching the database.
python manage.py check;

The sqlmigrate command takes migration names and returns their SQL:
python manage.py sqlmigrate polls 0001

By running makemigrations, you’re telling Django that you’ve made some changes to your models (in this case, you’ve made new ones) and that you’d like the changes to be stored as a migration.
python manage.py makemigrations polls

The migrate command takes all the migrations that haven’t been applied (Django tracks which ones are applied using a special table in your database called django_migrations) and runs them against your database - essentially, synchronizing the changes you made to your models with the schema in the database.
python manage.py migrate

-->>Change your models (in models.py).
-->>Run python manage.py makemigrations to create migrations for those changes
-->>Run python manage.py migrate to apply those changes to the database.
The reason that there are separate commands to make and apply migrations is because you’ll commit migrations to your version control system and ship them with your app; they not only make your development easier, they’re also usable by other developers and in production.

https://simpleisbetterthancomplex.com/series/beginners-guide/1.11/
